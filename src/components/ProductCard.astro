---
export interface Props {
  name: string;
  description: string;
  image: string;
  category: string;
  images?: string[]; // Array opcional de imágenes adicionales
}

const { name, description, image, category, images = [] } = Astro.props;
---

<div 
  class="bg-white rounded-xl shadow-lg overflow-hidden card-hover scroll-animate fade-up hover:shadow-xl transition-all duration-300"
  data-category={category}
>
  <!-- Galería de imágenes con carousel -->
  <div class="aspect-square overflow-hidden bg-gray-100 relative group">
    {/* Mostrar múltiples imágenes si las hay */}
    {images.length > 1 ? (
      <div class="product-carousel relative w-full h-full">
        <!-- Imágenes del carousel -->
        {images.map((img, index) => (
          <img 
            src={img} 
            alt={`${name} - Vista ${index + 1}`}
            class={`absolute inset-0 w-full h-full object-contain transition-all duration-500 ${index === 0 ? 'opacity-100 scale-100' : 'opacity-0 scale-105'}`}
            loading="lazy"
            data-carousel-item={index}
            onerror="console.error('❌ Error cargando imagen:', this.src);"
          />
        ))}
        
        <!-- Indicador de múltiples fotos -->
        <div class="absolute top-3 right-3 bg-black/70 text-white text-xs font-bold px-2 py-1 rounded-full flex items-center gap-1">
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
          </svg>
          {images.length}
        </div>
        
        <!-- Controles de navegación (aparecen en hover) -->
        <div class="absolute inset-0 flex items-center justify-between p-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
          <button 
            class="carousel-prev bg-white/90 hover:bg-white text-gray-800 p-1.5 rounded-full shadow-lg transition-all duration-200 hover:scale-110"
            onclick="event.stopPropagation(); this.closest('.product-carousel').dispatchEvent(new CustomEvent('carousel-prev'));"
          >
            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>
          
          <button 
            class="carousel-next bg-white/90 hover:bg-white text-gray-800 p-1.5 rounded-full shadow-lg transition-all duration-200 hover:scale-110"
            onclick="event.stopPropagation(); this.closest('.product-carousel').dispatchEvent(new CustomEvent('carousel-next'));"
          >
            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
        </div>
        
        <!-- Indicadores de puntos -->
        <div class="absolute bottom-3 left-1/2 transform -translate-x-1/2 flex space-x-1">
          {images.map((_, index) => (
            <button 
              class={`w-2 h-2 rounded-full transition-all duration-300 ${index === 0 ? 'bg-white' : 'bg-white/50'}`}
              data-dot-index={index}
              onclick={`event.stopPropagation(); this.closest('.product-carousel').dispatchEvent(new CustomEvent('carousel-goto', { detail: ${index} }));`}
            ></button>
          ))}
        </div>
      </div>
    ) : (
      <!-- Imagen única (comportamiento original) -->
      <img 
        src={image} 
        alt={name}
        class="w-full h-full object-contain transition-transform duration-300 hover:scale-105"
        loading="lazy"
        onerror="console.error('❌ Error cargando imagen:', this.src); this.style.display='none'; this.nextElementSibling.style.display='flex';"
      />
    )}
    
    <!-- Fallback para imagen no disponible -->
    <div class="w-full h-full bg-gray-200 flex items-center justify-center text-gray-500" style="display: none;">
      <div class="text-center">
        <svg class="w-8 h-8 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
        </svg>
        <p class="text-xs">Imagen no disponible</p>
      </div>
    </div>
  </div>
  
  <!-- Contenido más compacto -->
  <div class="p-4">
    <!-- Título más pequeño -->
    <h3 class="text-lg font-bold text-dark-800 mb-3 line-clamp-2">{name}</h3>
    
    <!-- Categoría y botón en la misma línea -->
    <div class="flex items-center justify-between">
      <span class="inline-block bg-accent-100 text-accent-800 text-xs font-medium px-3 py-1 rounded-full capitalize">
        {category}
      </span>
      
      <!-- Botón más información mejorado -->
      <button 
        onclick={`window.openEnhancedProductModal && window.openEnhancedProductModal({
          name: ${JSON.stringify(name)},
          description: ${JSON.stringify(description)},
          image: ${JSON.stringify(image)},
          category: ${JSON.stringify(category)},
          images: ${JSON.stringify(images.length > 0 ? images : [image])}
        })`}
        class="bg-primary-600 hover:bg-primary-700 text-white text-sm font-medium px-4 py-2 rounded-full transition-all duration-300 hover:scale-105 flex items-center gap-2 group"
      >
        <span>Ver más</span>
        {images.length > 1 && (
          <span class="bg-white/20 text-xs px-2 py-1 rounded-full">+{images.length}</span>
        )}
        <svg class="w-4 h-4 transition-transform group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"></path>
        </svg>
      </button>
    </div>
  </div>
</div>

<script>
  // Manejo del carousel en las tarjetas de productos
  document.addEventListener('DOMContentLoaded', () => {
    const carousels = document.querySelectorAll('.product-carousel');
    
    carousels.forEach(carousel => {
      let currentIndex = 0;
      const images = carousel.querySelectorAll('[data-carousel-item]');
      const dots = carousel.querySelectorAll('[data-dot-index]');
      const totalImages = images.length;
      
      if (totalImages <= 1) return; // No hacer nada si solo hay una imagen
      
      // Función para mostrar imagen específica
      function showImage(index: number) {
        // Ocultar todas las imágenes
        images.forEach((img, i) => {
          if (i === index) {
            img.classList.add('opacity-100', 'scale-100');
            img.classList.remove('opacity-0', 'scale-105');
          } else {
            img.classList.remove('opacity-100', 'scale-100');
            img.classList.add('opacity-0', 'scale-105');
          }
        });
        
        // Actualizar dots
        dots.forEach((dot, i) => {
          if (i === index) {
            dot.classList.add('bg-white');
            dot.classList.remove('bg-white/50');
          } else {
            dot.classList.remove('bg-white');
            dot.classList.add('bg-white/50');
          }
        });
        
        currentIndex = index;
      }
      
      // Función para ir a la siguiente imagen
      function nextImage() {
        const nextIndex = (currentIndex + 1) % totalImages;
        showImage(nextIndex);
      }
      
      // Función para ir a la imagen anterior
      function prevImage() {
        const prevIndex = (currentIndex - 1 + totalImages) % totalImages;
        showImage(prevIndex);
      }
      
      // Event listeners para controles
      carousel.addEventListener('carousel-next', nextImage);
      carousel.addEventListener('carousel-prev', prevImage);
      carousel.addEventListener('carousel-goto', (e: Event) => {
        const customEvent = e as CustomEvent;
        showImage(customEvent.detail);
      });
      
      // Auto-play opcional (descomenta si quieres que cambien automáticamente)
      /*
      let autoPlayInterval;
      
      function startAutoPlay() {
        autoPlayInterval = setInterval(nextImage, 3000); // Cambiar cada 3 segundos
      }
      
      function stopAutoPlay() {
        clearInterval(autoPlayInterval);
      }
      
      // Pausar auto-play en hover
      carousel.addEventListener('mouseenter', stopAutoPlay);
      carousel.addEventListener('mouseleave', startAutoPlay);
      
      // Iniciar auto-play
      startAutoPlay();
      */
    });
  });
</script>